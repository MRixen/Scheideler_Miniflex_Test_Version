MODULE Common(SYSMODULE)
  !***************************************************
  !Programtype:  Foreground
  !Description:  This is a module common to all detail programs
  !              It also contains data regularly used by PickVision.
  !
  !
  !              Svensk Industriautomation AB.
  !
  ! Copyright (c) Svensk Industriautomation AB 2011
  ! All rights reserved
  !
  !---------------------------------------------------
  !Version           Date            Description
  !---------------------------------------------------
  !4.0              20111124         Created
  !
  !***************************************************

  !
  !# -----------------------
  !#--------Num data
  !# -----------------------
  CONST num RADIUS_SAFE:=500; ! define a cylindrical region for safe position
  CONST num HEIGHT_SAFE:=500;
  CONST num RADIUS_MACHINE:=400; ! define a large spherical region around machine (collision region)
  CONST num RADIUS_FORBIDDEN:=2000; ! define a large cylindrical slice above robot foot that is not allowed for robot
  CONST num HEIGHT_FORBIDDEN:=500;
  VAR num nAnswer := 0;! variables for user setup
  
   
  !
  !# -----------------------
  !# ------ Pos data
  !# -----------------------
  CONST pos CENTER_FORBIDDEN:=[0,0,800]; ! defined center point for Forbiddenzone
  CONST pos CENTER_MACHINE:=[715,130.1,341.7]; ! defined center point for Machinezone
  CONST pos CENTER_SAFE:=[0,0,500];       ! defined center point for Safezone

  !# -----------------------
  !#--------Shapedata data
  !# -----------------------
  VAR shapedata forbiddenShape;
  VAR shapedata safeShape;
  VAR shapedata machineShape;

  !
  !# -----------------------
  !#--------String data
  !# -----------------------
  CONST string sSafeStartMenuDE{3}:= [" Roboter kan nicht sicher starten.  "," Bewegen zu sicherer Zone und Start."," ACHTUNG: Drücke OK für Direktstart. "];
  CONST string sSafeStartMenuEN{3}:= [" Robot can not be started safely.   "," Move to save region and restart.   "," CAUTION: Press OK to start anyhow. "];
  CONST string sSafeStartMenuSV{3}:= [" Robot kan inte startas säkert.     "," Kör till säkert läge och starta om."," VARNING: Tryck OK för att starta ändå."];
  VAR string sLangSafeStart;

  !
  !# -----------------------
  !#--------Tooldata data
  !# -----------------------
  PERS tooldata tCurrentTool:=[TRUE,[[0,0,174],[1,0,0,0]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  PERS tooldata tCalibTool:=[TRUE,[[0,0,100],[1,0,0,0]],[0.5,[0,0,50],[1,0,0,0],0.012,0.012,0.012]];

  !
  !# -----------------------
  !#--------Wobjdata data
  !# -----------------------
  PERS wobjdata wCamera:=[FALSE,TRUE,"",[[-102.037,-582.066,232.761],[0.99986,-0.000891593,-0.00184371,0.0166189]],[[19.0902,-10,-0.372842],[0.99993,-0.00273689,0.000310346,-0.011537]]];
  PERS wobjdata wCamera1:=[FALSE,TRUE,"",[[165.278,-375.019,237.902],[0.0050912,0.00461898,-0.00258304,-0.999973]],[[0,0,0],[1,0,0,0]]];
  PERS wobjdata wCamera2:=[FALSE,TRUE,"",[[114.962,-709.213,402.174],[0.707966,-0.00169131,0.00222764,-0.706241]],[[0,0,0],[1,0,0,0]]];
  PERS wobjdata wCamera3:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
  PERS wobjdata wCamera4:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
  PERS wobjdata wCurrentWobj:=[FALSE,TRUE,"",[[0,0,0],[1,0,0,0]],[[0,0,0],[1,0,0,0]]];
   PERS wobjdata wMachine:=[FALSE,TRUE,"",[[599.461,194.494,-47.5055],[0.774226,0.000641626,-0.00028931,-0.632908]],[[0,0,0],[1,0,0,0]]];

  !
  !# -----------------------
  !#--------Wzstationary data
  !# -----------------------
  VAR wzstationary forbiddenVolume;
  VAR wzstationary machineVolume;
  VAR wzstationary safeVolume;
  PERS robtarget pHome:=[[282.32,-370.67,338.87],[0.0551018,0.47132,0.878656,-0.0527792],[-1,-1,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
  TASK PERS tooldata tGripper:=[TRUE,[[0,0,174],[1,0,0,0]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  TASK PERS tooldata tGripperCam2:=[TRUE,[[-63.66,0,130],[0.793353,0,-0.608761,0]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  TASK PERS wobjdata wPencilSlope:=[FALSE,TRUE,"",[[735.202,97.6783,10.8789],[0.696729,0.0914596,-0.0917144,-0.705544]],[[0,0,0],[1,0,0,0]]];
  TASK PERS wobjdata wTable:=[FALSE,TRUE,"",[[460.258,263.163,-89.6418],[0.705075,-0.000798584,0.00032729,-0.709133]],[[0,0,0],[1,0,0,0]]];
  TASK PERS wobjdata wPaper:=[FALSE,TRUE,"",[[416.04,223.317,-90.0097],[0.70012,-0.000666147,0.0026497,-0.71402]],[[0,0,0],[1,0,0,0]]];
  TASK PERS wobjdata wPaperAngle:=[FALSE,TRUE,"",[[505.289,82.0917,-90.8406],[0.834516,-0.000284502,1.84605E-05,-0.550983]],[[0,0,0],[1,0,0,0]]];
  TASK PERS tooldata tPencil:=[TRUE,[[126.295,0.0145808,154.626],[0.707106,0,0.707106,0]],[1.8,[40,0,110],[1,0,0,0],0,0,0]];
  PERS tooldata tGripper1:=[TRUE,[[0,0,174],[1,0,0,0]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  
  !Neue Tools fuer Mutter
  !PERS tooldata tGripperBlech:=[TRUE,[[79.86,10.1,148.36],[0.05886,0.78021,0.61888,0.06929]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  PERS tooldata tGripperBlech:=[TRUE,[[79.86,10.07,148.36],[0.883022,-0.321394,0.321394,0.116978]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  PERS tooldata tGripperMutter:=[TRUE,[[-63.66,0,130],[0.793353,0,-0.608761,0]],[0.2,[0,0,30],[1,0,0,0],0,0,0]];
  TASK PERS tooldata toolTest:=[TRUE,[[0,0,0],[1,0,0,0]],[-1,[0,0,0],[1,0,0,0],0,0,0]];
  !-----------------------------------------------------------------------------
  ! Function:      DefWorldZones
  ! Description:   Defines SVIA standard world zones            
  ! Argument:      
  ! Remarks:       World zone will be active during program execution
  !                and jogging.
  ! Called from:   power_on_routine
  !-----------------------------------------------------------------------------
  PROC DefWorldZones()
    DefForbiddenZone;
    DefMachineZone;
    !DefSafeZone;
  ENDPROC

  !-----------------------------------------------------------------------------
  ! Function:      DefForbiddenZone
  ! Description:   Defines a forbidden zone. 
  !                Can be used to stop the robot if it comes inside the declared zone                 
  ! Argument:      
  ! Remarks:       World zone will be active during program execution
  !                and jogging.
  ! Called from:   DefWorldZones
  !-----------------------------------------------------------------------------
  LOCAL PROC DefForbiddenZone()
    WZCylDef \Inside,forbiddenShape,CENTER_FORBIDDEN,RADIUS_FORBIDDEN,HEIGHT_FORBIDDEN;
    WZLimSup \Stat,forbiddenVolume,forbiddenShape;
  ENDPROC

  !-----------------------------------------------------------------------------
  ! Function:      DefSafeZone
  ! Description:   Defines a safe zone. 
  !                When the robot is inside this zone it is safe to start program                 
  ! Argument:      
  ! Remarks:       World zone will be active during program execution
  !                and jogging.
  ! Called from:   DefWorldZones
  !-----------------------------------------------------------------------------
  LOCAL PROC DefSafeZone()
    WZCylDef\Inside,safeShape,CENTER_SAFE,RADIUS_SAFE,HEIGHT_SAFE;
    WZDOSet\Stat,safeVolume\Inside,safeShape,DOF_SafeZone, 0;
  ENDPROC

  !-----------------------------------------------------------------------------
  ! Function:      DefMachineZone
  ! Description:   Defines a zone inside macheine. 
  !                When the robot is inside this zone the machine shall not be
  !                able to run becaus of output signal LoaderOut
  ! Argument:      
  ! Remarks:       World zone will be active during program execution
  !                and jogging.
  ! Called from:   DefWorldZones
  !-----------------------------------------------------------------------------
  LOCAL PROC DefMachineZone()
    WZSphDef\Inside,machineShape,CENTER_MACHINE,RADIUS_MACHINE;
    WZDOSet\Stat,machineVolume\Inside,machineShape,doLoaderOut, 0;
  ENDPROC

  !-----------------------------------------------------------------------------
  ! Function:      isDistanceOK
  ! Description:   Function that checks if the robot with its current tool is close to the
  !                specified robtarget in the specified workobject
  ! Argument:      checkPosition, workObject, maxDistance
  ! Remarks:       
  ! Called from:   SafeRobotStart
  !-----------------------------------------------------------------------------
  LOCAL FUNC bool isDistanceOK(robtarget checkPosition, wobjdata workObject, num maxDistance)
    VAR pos currentPos;
    wCurrentWobj:=workObject;
    tCurrentTool:=CTool();
    currentPos:=CPos(\Tool:=tCurrentTool\WObj:=wCurrentWobj);
    IF Distance(checkPosition.trans,currentPos) <= maxDistance THEN
      RETURN TRUE;
    ELSE
      RETURN FALSE;
    ENDIF
  ENDFUNC

  !-----------------------------------------------------------------------------
  ! Procedure:     SafeRobotStart
  ! Description:   Must be called as first routine upon robot start.
  !                This will check if the robot is in a safe restart position.
  ! Argument:      pCompareTarget eg RefPosIn
  ! Remarks:
  ! Called from:   Detail specific robot program eg pvbase. Procedure Initialize.
  !-----------------------------------------------------------------------------
  PROC SafeRobotStart(\robtarget pCompareTarget)
    VAR btnres btnAnswer;
    VAR num nAnswer;
    VAR string sSafeStartMenu{3};

    ! Check LoaderOut, If required as a DOutput, EIO_CROSS: with Loaderout/ RobotInMachine  -Act1_invert
    !IF DOutput(LoaderOut)=0 GOTO NoSafeStart;
    !
    ! Check SafeZone, only if defined
    ! IF DOutput(DOF_SafeZone)=1 RETURN;
    !
    ! Check distance to possible general robtargets, only if defined
    IF Present(pCompareTarget) = TRUE THEN
      IF isDistanceOK(pCompareTarget,wObj0,200)=TRUE RETURN;
    ENDIF

    ! Check distance to specific robtargets, only if defined in Common OR MainModule.
    IF isDistanceOK(pHome,wObj0,200)=TRUE RETURN;
NoSafeStart:
    sLangSafeStart:=GetSysInfo(\CtrlLang);
    IF sLangSafeStart = "de" THEN
      sSafeStartMenu{1}:=sSafeStartMenuDE{1};
      sSafeStartMenu{2}:=sSafeStartMenuDE{2};
      sSafeStartMenu{3}:=sSafeStartMenuDE{3};
    ELSEIF sLangSafeStart = "sv" THEN
      sSafeStartMenu{1}:=sSafeStartMenuSV{1};
      sSafeStartMenu{2}:=sSafeStartMenuSV{2};
      sSafeStartMenu{3}:=sSafeStartMenuSV{3};
    ELSE
      sSafeStartMenu{1}:=sSafeStartMenuEN{1};
      sSafeStartMenu{2}:=sSafeStartMenuEN{2};
      sSafeStartMenu{3}:=sSafeStartMenuEN{3};
    ENDIF
    btnAnswer := UIMessageBox (
      \Header:= "ACHTUNG-CAUTION-VARNING"
      \MsgArray:=sSafeStartMenu
      \Buttons:=btnOKCancel
      \Icon:=iconWarning);
    IF btnAnswer = resOK THEN
      ! OK from the operator
      RETURN;
    ELSE
      ! Cancel from the operator or operation break
      EXIT;
    ENDIF
    TPErase;
  ENDPROC

  
  !------------------------------------------------------------------------------------------------
  ! Procedure:   Gripper
  ! Description: This procedure is for Gripper Close/Open
  !              Diese Prozedure ist für Öffnen und Schließen des Greifers
  !------------------------------------------------------------------------------------------------
  PROC Gripper(Num State)
  	If State = 1 THEN
  		Set do_Grip1Close;
  		Reset do_Grip1Open;
  		WaitTime 0.15;
  	ENDIF
  	If State = 0 THEN
  		Reset do_Grip1Close;
  		Set do_Grip1Open;
  		WaitTime 0.1;
  	ENDIF
  	
  ENDPROC
  
  !------------------------------------------------------------------------------------------------
  ! Procedure:   Gripper2
  ! Description: This procedure is for Gripper2 Close/Open
  !              Diese Prozedure ist für Öffnen und Schließen des Greifers
  !------------------------------------------------------------------------------------------------
  PROC Gripper2(Num State)
  	If State = 0 THEN
  		Set do_Grip2Close;
  		Reset do_Grip2Open;
  		WaitTime 0.15;
  	ENDIF
  	If State = 1 THEN
  		Reset do_Grip2Close;
  		Set do_Grip2Open;
  		WaitTime 0.1;
  	ENDIF
  	
  ENDPROC

ENDMODULE
